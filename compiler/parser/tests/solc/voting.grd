contract Ballot {

    class Voter {
        weight uint
        voted bool
        delegate address
        vote uint
    }

    class Proposal {
        name bytes32
        voteCount uint
    }

    external chairperson address
    external voters map[address]Voter
    external proposals [Proposal]

    constructor(proposalNames [bytes32]){

        chairperson = msg.sender
        voters[chairperson].weight = 1

    }

    external func giveRightToVote(voter address){
        enforce(msg.sender == chairperson)
        enforce(!voters[voter].voted)
        enforce(voters[voter].weight == 0)
        voters[voter].weight  = 1
    }

    external func vote(proposal uint) {
        storage sender := voters[msg.sender]
        enforce(!sender.voted)

        sender.voted = true
        sender.vote = proposal

        proposals[proposal].voteCount += sender.weight
    }

    external func winningProposal() uint {
        winningVoteCount := 0 as uint
        for p := 0; p < proposals.length; p++ {
            if proposals[p].voteCount > winningVoteCount {
                winningVoteCount = proposals[p].voteCount
                winningProposal = p
            }
        }
        return winningProposal
    }


    external func winnerName() bytes32 {
        return proposals[winningProposal()].name
    }



}
