contract BlindAuction {

    class Bid {
        blindedBid bytes32
        deposit uint
    }

    external (
        beneficiary address
        biddingEnd uint
        revealEnd uint
        ended bool

        bids map[address][]Bid
        highestBidder address
        highestBid uint
    )

    pendingReturns map[address]uint

    event AuctionEnded(winner address, highestBid uint)

    internal func onlyBefore(time uint){
        assert(now() < time)
    }

    internal func onlyAfter(time uint){
        assert(now() > time)
    }

    constructor(biddingTime, revealTime uint, beneficiary address){
        this.beneficiary = beneficiary
        this.biddingEnd = now() + biddingTime
        this.revealEnd = this.biddingEnd + revealTime
    }

    func bid(blindedBid bytes32) {
        onlyBefore(biddingEnd)
        bids[msg.sender] = append(bids[msg.sender], Bid{
            blindedBid: blindedBid,
            deposit: msg.value
        })
    }

    func reveal(values []uint, fake []bool, secret []bytes32) {

        onlyAfter(biddingEnd)
        onlyBefore(revealEnd)

        length := bids[msg.sender].length

        assert(values.length == length)
        assert(fake.length == length)
        assert(secret.length == length)

        refund uint
        for i := 0; i < length; i++ {

            v, f, s := values[i], fake[i], secret[i]
            if bid.blindedBid != keccak256(v, f, s) {
                continue
            }
            refund += bid.deposit
            if !fake and bid.deposit >= value {
                if placeBid(msg.sender, value) {
                    refund -= value
                }
            }
            bid.blindedBid = 0 as bytes32
        }
        transfer(msg.sender, refund)

    }


    func placeBid(bidder address, value uint) bool {
        if value <= highestBid {
            return false
        }
        if highestBidder != 0 {
            pendingReturns[highestBidder] += highestBid
        }
        highestBid = value
        highestBidder = bidder
        return true
    }

    func withdraw() {
        amount := pendingReturns[msg.sender]
        if amount > 0 {
            pendingReturns[msg.sender] = 0
            transfer(msg.sender, amount)
        }
    }

    func auctionEnd(){
        onlyAfter(revealEnd)
        assert(!ended)
        AuctionEnded(highestBidder, highestBid)
        ended = true
        transfer(beneficiary, this.balance)
    }

}
