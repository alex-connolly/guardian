contract Ballot {

    class Voter {
        var weight uint
        var voted bool
        var delegate address
        var vote uint
    }

    class Proposal {
        var name bytes32
        var voteCount uint
    }

    external var (
        chairperson address
        voters map[address]Voter
        proposals []Proposal
    )

    constructor(proposalNames []bytes32){

        chairperson = msg.sender
        voters[chairperson].weight = 1

        for i := 0; i < proposalNames.length; i++ {
            proposals = append(proposals, Proposal{
                name: proposalNames[i],
                voteCount: 0,
            })
        }

    }

    external func giveRightToVote(voter address){
        assert(msg.sender == chairperson)
        assert(!voters[voter].voted)
        assert(voters[voter].weight == 0)
        voters[voter].weight  = 1
    }

    external func vote(proposal uint) {
        storage sender := voters[msg.sender]
        assert(!sender.voted)

        sender.voted = true
        sender.vote = proposal

        proposals[proposal].voteCount += sender.weight
    }

    external func winningProposal() uint {
        winningVoteCount := 0 as uint
        for p := 0; p < proposals.length; p++ {
            if proposals[p].voteCount > winningVoteCount {
                winningVoteCount = proposals[p].voteCount
                winningProposal = p
            }
        }
        return winningProposal
    }


    external func delegate(to address){
        storage sender = voters[msg.sender]
        assert(!sender.voted)
        assert(to != msg.sender)

        for voters[to].delegate != 0 as address {
            to = voters[to].delegate
            assert(to != msg.sender)
        }

        sender.vote = true
        sender.delegate = to
        storage delegate = voters[to]
        if delegate.voted {
            proposals[delegate.vote].voteCount += sender.weight
        } else {
            delegate.weight += sender.weight
        }

    }

    external func winnerName() bytes32 {
        return proposals[winningProposal()].name
    }


}
